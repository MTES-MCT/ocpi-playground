#
# Warren package
#
[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "ocpi-playground"
description = "A playground for OCPI-related development"
readme = "../README.md"
authors = [
  { name="Julien Maupetit", email="julien.maupetit@beta.gouv.fr" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.9"
license = {file = "../LICENSE"}
keywords = ["OCPI"]
dependencies = [
    "polyfactory==2.15.0",
    "py-ocpi==0.3.1",
    "uvicorn[standard]==0.28.0",
]
dynamic = ["version"]

[project.urls]
"Homepage" = "https://github.com/MTES-MCT/ocpi-playground"
"Bug Tracker" = "https://github.com/MTES-MCT/ocpi-playground/issues"

[project.optional-dependencies]
dev = [
    "black==24.2.0",
    "mypy==1.9.0",
    "pytest==7.4.4",
    "ruff==0.3.2",
]

[tool.setuptools.dynamic]
version = { attr = "playground.__version__" }

# Third party packages configuration
[tool.pytest.ini_options]
addopts = "-v"
python_files = [
    "test_*.py",
    "tests.py",
]
testpaths = [
    "tests",
]

[tool.ruff.lint]
select = [
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # pycodestyle error
    "F",  # Pyflakes
    "I",  # Isort
    "ISC",  # flake8-implicit-str-concat
    "PLC",  # Pylint Convention
    "PLE",  # Pylint Error
    "PLR",  # Pylint Refactor
    "PLW",  # Pylint Warning
    "RUF100",  # Ruff unused-noqa
    "S",  # flake8-bandit
    "T20", # flake8-print
    "W",  # pycodestyle warning
]

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = ["fastapi.Depends", "fastapi.params.Depends", "fastapi.Query", "fastapi.params.Query"]

[tool.mypy]
plugins = "pydantic.mypy"
files = "./**/*.py"
exclude = ["/tests/"]

[[tool.mypy.overrides]]
module = [
    "py_ocpi.*",
]
ignore_missing_imports = true
